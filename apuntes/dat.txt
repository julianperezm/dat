*******
5/02/20
*******
	Ejemplo hola mundo:

	<!DOCTYPE html>
	<html>
		<head>
			<title>Hola mundo en HTML</title>
			<meta charset="utf-8">
		</head>
		<body>
			Hola, mundo.
		</body>
	</html>

	- Los elementos void no se cierran
	....completar con los ya dado en clase ....
	
	<em> -> desctacar un elemento (no confundir con el em de CSS)
	
	<pre> -> se respetan los espacios y los saltos de linea
	
	<h1> ... <h6> -> cabeceras de mas importante a menos
	
	<a> -> sirve para hacer hiperenlaces ejemplo: <a href="https://www.urjc.es">Página de la URJC</a>
		los enlaces pueden ser:
			* Absolutos a una direccion -> <a href="http://linkedsite/url.html">Documento</a>
			* Absolutos dentro del mismo sitio -> <a href="/url.html">Documento en mismo sitio web</a>
			* Relativos -> <a href="url.html">Documento en mismo sitio web y "dir"</a>
		un anchor es un enlace como otro cualquiera, hace referencia a un putno concreto dentro de un docuemnto
			ejemplo: https://gsyc.urjc.es/˜mortuno/index_at.html#evaluacion
		Para añadir un anchor ->
			<h1 id="punto07">Punto 7</h1>
			[.....]
			<a href="#punto07">Volver al punto 7</a>
		si queremos abrir otra pestaña en el atributo target="_blank"

	<div> -> sirve para seleccionar una parte del texto, se le suele poner etiqueta id para luego darle formato con CSS
		ejemplo: <div class="respuesta">Todas son falsas</div>

	<span> -> se parece al div en cuanto al seleccionar una parte de texto, pero con la diferencia que este no crea un bloque, se suele utilizar para para dar formato a un grupo de palabras
			
	<table> ->
		<tr> -> cabecera de tabla
		<th> -> columnas 
		<td> -> filas
	
	<ul> -> lista desordenada
		<li> -> cada uno de los elemntos
	
	<ol> -> lista ordenada
		<li> -> cada uno de los elemntos
	
	**añadiendo type puedes cambiar el formato de la enumeracion**

	<dl> -> lista de descripciones
		<dt> -> titulos
		<dd> -> descripcion

	<img> -> insertar imagenes 
		ejemplo: <img src="urjc.png" alt="Logo de la URJC">
		para el tamaño -> (lo mejor es indicar uno de los dos ya que la pagina hace el otro automaticamente)
			ejemplo: <img src="urjc.png" alt="Logo de la URJC" width="300" height="240">
		si queremos incluir un hipervinculo dentro de la imagen: ->
			<a href="https://www.urjc.es">
			<img src="images/urjc.png" width="120" alt="logo de la URJC">
			</a>


********
11/02/20
********
	repaso -> 	
		<em>
		<pre>
		<h1> ... <h6>
		<a>
	
	<link> -> para unir el css con el html
	
	<p> -> crea un parrafo

	<br> -> salto de linea


	Tecnincas para evitar el spam en el correo -> poner una imagen o pedroperezquitaesto@gmail.com	

	*** pychart *** SAT

********
12/02/20
********
	-----------
	Formularios
	-----------
	
		* <form> -> crea un formulario que permite aceptar entrada de informacion por parte de los usuarios

		* <input> -> tipo void atributos -> 
			type=
				radio = (elegir opciones) -> para hacer difrentes subcojuntos cambiando el nombre
				value -> el valor al pinchar 
				
				checkbox -> perimte elegir 0 o mas opciones
				
				color -> cuadrito donde puedes elegir el color
				
				date -> formato fecha
				
				datetime-local -> fecha y hora
				
				email -> formato email
				
				number -> fomato numero
			
				mas tipos  diapo 63
			
			checked -> la opcion marcada
			
			name(no puede tener ñ) =
			value=
			submit(enviar)-> lo envia donde ponga en action
			
		Tres formas de validar:

			* En el servidor(no recomendable)

			* En el html	

			*


********
18/02/20
********
	---
	CSS
	---
	
		* Diferentes formas de integras:
			-Hoja de estilo externa -> cosas mas generales
			-Hoja de estilo interna (dentro del atributo style) -> para cosas sencillas
			- Direcatmente en los elmentos del HTML -> NO USAR

		* Selectores:
			
			(espacio)	 desciendente (hijo, nieto...)

			. 		 clase

			, 		 OR

			(concatenación)	 AND

			# 		 id 

			* Se aplica la regla mas especifica en caso de que haya reglas contradictorias y en caso de que sean igual de especifica cogemos la ultima
			 -------------------
			* Selector Universal -> * {
			 -------------------	margin: 0;
						padding: 0;
						}
			--------------------------------
			* Selector de tipo o de etiqueta -> 	h1, h2, h3 {
			--------------------------------	color: #8A8E27;
								font-weight: normal;
								font-family: Arial, Helvetica, sans-serif;
								}
								h1 { font-size: 2em; } -> 200% mayor que la letra m normal
								h2 { font-size: 1.5em; }
								h3 { font-size: 1.2em; }
			-----------------------
			* Selector descendiente ->
			-----------------------
						p span { color: red; } -> todos los elementos span que esten dentro de un elemento p
						[...]
						<p>
						...
						<span>Texto1</span>
						<a href="">...<span>Texto2</span></a>
						...
						</p>

			** Los elementos que estan dentro de otros elementos se le aplica la regla que se le aplica al elemento principal**
						p * a -> a todos los descendientes menos a los hijos

			-------------------
			* Selector de clase ->
			-------------------
						.destacado { color: red; } -> Creamos una clase en este caso destacado
						[...]
						<p class="destacado">
							Lorem ipsum dolor sit amet...
						</p>
						<p>Nunc sed lacus et
							<a href="#" class="destacado">est adipiscing</a>
						</p>
						<p>Class aptent taciti <em class="destacado">sociosqu ad</em>
						</p>

				- Podemos tener varias clases en un mismo elemento ->
					<style>
						.comentario {color : blue;}
						.noticia {color : red;}
						.obsoleto {text-decoration : line-through;}
					</style>
					[...]
					<body>
						<p class="comentario"> Lorem ipsum dolor sit amet<p>
						<p class="comentario obsoleto"> consectetur adipisicing elit, </p>
						<p class="noticia "> sed do eiusmod tempor incididunt </p>
						<p class="noticia obsoleto"> ut labore et dolore magna aliqua.</p>
					</body>

				- En este caso solo se aplica al primero la clase -> 
					p.destacado { color: red } -> esto solo se aplica a parrafos destacados SOLO
					[...]
					<p class="destacado">
					Lorem ipsum dolor sit amet...
					</p>
					<p>Nunc sed lacus et
					<a href="#" class="destacado">est adipiscing</a>
					</p>
					<p>Class aptent taciti <em class="destacado">sociosqu ad</em>
					</p>

				
				- .a.b{...} -> se aplica a los elementos que tengan el atributo a y b

					Ejemplo -> concatenacion_clases.html

				p.aviso { ... } -> parrfo de clase aviso
				p .aviso { ... } -> clase aviso dentro de un parrafo
				p, .aviso { ... } -> a cualquier parrafo o a cualquier elemento de clase aviso
				*.aviso { ... } -> a cualquier elemento de clase aviso




		
			---------------------------
			* Selector de identificador ->
			---------------------------
						#destacado { color: red; }
						<p>Primer p´arrafo</p>
						<p id="destacado">Segundo p´arrafo</p>
						<p>Tercer p´arrafo</p>

					p#aviso { ... } -> parrafo cuyo id sea aviso
					p #aviso { ... } -> id aviso dentro del parrafo
					p, #aviso { ... } -> a cualquier parrafo y a cualquier id aviso
					*#aviso { ... } -> a cualquier id aviso

					.aviso .especial { ... } -> un elmento de clase especial y que este dentro de clase aviso
					div.aviso span.especial { ... } -> un div de clase aviso que tenga dentro un span de clase especial
					ul#menuPrincipal li.destacado a#inicio { ... }-> a con id inicio dentro de un li con clase destacado que ste dentro de un ul con id menu principal

********
18/02/20
********
	<--- Entities --->

		* los usamos para caracteres que coinciden con metacaracteres de HTML(para saber cuales son -> google 
			
			un entity frecuente es -> &nbsp no-breaking-sapce para asegurarnos que siempre este en la misma linea	lorem ipsum
	
	-------------
	Uso de editor
	-------------

		* diapo 74 HTML
		
		* apm install atom-beautify

	* Unidades de medida -> Es recomnedable mejor siempre unidades relativas
	
	* Especificacion de color -> Recomendable utilizar el codigo hexadecimal
			
				color, backgroud-color, border-color

	* Atributos relacionados con el texto -> alineacion, subrayado, Tamaño, Estilo ....
	
	* Atributos relacionados con los bordes ->

	---------------
	Modelo de cajas
	---------------

		* https://gsyc.urjc.es/~mortuno/cajas.html

		* el margen afecta tanto a la primera caja en el margen inferior como a la segunda caja en el margen superior

		* Diferentes formas de indicar un margen -> diapo 37
	
			

********
25/02/20
********
	---------
	Bootstrap
	---------

		* Hola mundo diapo -> 6
		
		* copiar y pegar el encabezado del hola mundo casi siempre

			<!DOCTYPE html>
			<html lang="es-ES"> <head>
				<meta charset="utf-8">
				<title>Hola mundo en bootstrap</title>
				<meta name="viewport" content="width=device-width, initial scale=1.0"> 
				<link rel="stylesheet"
					href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
 				<script
					src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js">
				</script>
				<script 
					src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js">
				</script> 
			</head>

		* en un container si sobra espacio se dejan márgenes si es container fluid se utiliza todo los márgenes

		* Viewport -> diferentes técnicas para la visualización de la pagina en diferentes pantallas(formatos)(zona de la pantalla visible
)
		
			-> Al aumentar la resolucion aparece una barra de desplazamiento en la parte interior(Esto en nuestro caso no nos debería pasar)(primera técnica)

			-> viewport virtual (apple) -> la pagina se compone para el virtual grande y luego el iPhone o el dispositivo muestra diferentes zonas del viewport arrastrando, arrastramos nuestro viewport físico sobre el viewport virtual(segunda generación de técnicas para la visualización), para decir que no lo utilice hay que ponerlo en el meta del html
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

			-> bootstrap tercera generación 

		* paginas responsieve -> página que se adapta al entorno

		* Sistema de rejilla -> diferentes combinaciones de columnas, la pantalla se tiene que dividir en 12 columnas

		Página interesante fiverr 

			-> tamaños de casillas , XS, sm, md, lg -> ejemplo rejilla de bootstrap
		
			si queremos que nuestras columnas nunca se apilan y lo queremos en tres columnas tenemos que hacerlas XS (diapositivas 22)

			-> columnas desplazadas: si queremos poner una en cada lado hacemos las dos juntas y desplazamos la de la derecha con el tamaño que queramos.



********
26/02/20
********
	-------
	Paneles
	-------
	
		* Diferentes tipos de penales según lo que queramos
	---
	btn
	---
		* Diferentes tipos de botón según nuestras necesidades
	---
	nav
	---
		* diferentes tipos de enlaces(pestañas, botones) para navegar dentro de una web


	--------
	Dropdown
	--------
		 * diapo 30-31


********
3/03/20
********
	
	-----------
	Formularios
	-----------
		
		* diapo 32-34
	
	--------
	carrusel
	--------
		
		* indicators (círculos abajo)

		* carousel - inner 
		
		* las flechas

		código diap 35-39






********
4/03/20
********

	Lenguaje interpretado: no se genera código ejecútale no necesitas compilarlo, suelen ser de mas alto nivel no hace falta compilarlo en cada plataforma, mas cómodo para el programador

	Lenguaje compilado: genera el código para ejecutarlo necesitas compilarlo y necesitas el compilador de la arquitectura. Necesitas compilar para cada plataforma, este es mas rápido


	Antes de optimizar nuestro codigo -> debemos medirlo 


	Comsidermos en unfined es igul al null

	* > 0.3===0.3
	true
	> 0.1+0.2===0.3
	false
	> 0.3-(0.1+0.2) 
	-5.551115123125783e-17

	ya que como lo hace en binario tienen un error de redondeo en e-17

	cc photos


********
10/03/20
********

	* Hola mundo con document.write -> diapo 16 (escribe en el html, en realidad escribe en el dom(estructura de datos que se utiliza para representar la pagina como tal))
	* hola mundo con fichero externo -> diapo 17

	* Utilizaremos siempre el modo estricto

	* Expresiones regulares(regexp) -> sirve para definir patrones de texto 

	* NaN -> 

	* si le pasamos parametro de mas el tercer parámetro lo ignora

	* undefined -> no tiene valor por que yo no se lo he dado, null -> le he dado yo el valor ser

	* let -> locales variables a un bloque
	* var -> variables globales 

	


	






